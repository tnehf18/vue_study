[ Vue.js 공부하기 ] 4일차 2022.04.14.

4. 상호작용

이벤트 처리

※ 매우 중요!!
이벤트 핸들링 순서는 v-on → computed, watch → 데이터 바인딩
이런 순서로 진행되고, 이 순서를 따르는 게 정신건강에 이롭다.

● v-on 
  - 이벤트 Listener에 v-on 을 사용.
  ex) v-on:click="test"
  - 축약형 v-on: 대신에 @로 쓸 수 있다.

  당연하게도 method 와 연결할 수도 있음.

● methods

  Vue 객체 내에 methods 블럭을 생성해서 거기에 원하는 method를 생성하고
  v-on 으로 바인딩처리할 수 있다.

  methods: {
    함수1: function() {

    }
  }

  <button @click="함수1">함수 실행</button>

  ※ Vue 객체에 내에 선언된 메소드들은 일반 Js 문법을 통해서 호출하는 것이 불가능.
    반대로, 일반 js 함수를 Vue 컴포넌트나 v-on 등을 통해서 호출하는 것도 불가능.

    방법이야 있겠지만, 권장하는 형태는 아닐 것이므로 가상 DOM 제어에 대한 개념을 잡는 게 좋다.


● methods


● 한정자 (이벤트 수식어)

  1) v-model 한정자
  (교재에서 .number 자체는 예제에 썼는데 무슨 기능인지 일언반구도 없음...)

  v-model로 입력을 받는 엘리먼트를 바인딩 했을 경우, 

  .number   : 숫자만 입력받도록 할 수 있음.
  .lazy     : 즉각 변동되는 것이 아닌 추가하여 change 이벤트 이후에 동기화.
  .trim     : 앞뒤 공백 제거 (가운데 공백은 아님.)

  ※ .number 의 경우, 입력을 아예 막는게 아니라 입력을 받고난 후 data에 들어오는 값만 숫자가 되도록 하는 것이므로,
    input 등 입력을 받는 곳에서 숫자 외 입력이 아예 안 나타나게 하고 싶다면 다른 방법이 필요하다.

    <input type="number" /> 가 HTML5 기본 방법이지만, input 생김새가 달라지고 IE에서는 제대로 지원되지 않는 등
    아직까지는 타 브라우저 호환성을 고려하면 현실적으로 사용하기 어렵다.
    watch 등을 혼용하는 방법이 있으나, 한글의 경우 IME 이슈가 있고 어쨋든 좀더 복잡한 처리가 요구된다.
  
  radio, checkbox 타입에는 .toggle .pick .selected 등의 한정자가 있으니, 공식 문서를 참고할 것.


  2) v-on 한정자 (이벤트 한정자)
  참고: https://kr.vuejs.org/v2/guide/events.html#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%88%98%EC%8B%9D%EC%96%B4

  event.preventDefault();
  event.stopPropagation();

  등의 이벤트의 기본 동작을 막는 경우가 많은데, 이걸 수식어로 만들어놔서 이벤트가 발생하자마자 동작함.

    - .stop       : event.stopPropagation() 기능. 부모로의 이벤트 전파를 차단하고 연결된 함수나 동작을 수행함.
    - .prevent    : event.preventDefault() 기능. 기본 이벤트를 차단하고 연결된 함수나 동작을 수행함.
    - .capture    : 이벤트 캡쳐링에 활용
    - .self       : event.target 이 해당 엘리먼트일 때만 동작함.
                    ※ 동일한 함수를 여러 엘리먼트에 적용시킬 때 target 을 구분할 수 있도록 처리하지 않아도 되므로 편리할 듯.
    - .once       : 연결된 함수나 동작이 한번만 동작함.
    - .passive    : 연결된 함수나 동작을 먼저 실행하고 기본 이벤트를 수행함.
                    ※ 많이 사용할 듯한 한정자이나, .prevent 와 같이 사용불가.
                      모바일 환경에서의 성능향상을 꾀하기 위해 만들어짐.

  ※ 한정자 여러개 중첩 가능. but, 아무렇게나 사용가능한 것은 아니니, 주의.
  `v-on:click.prevent.self`를 사용하면 **모든 클릭**을 막을 수 있으며 `v-on:click.self.prevent`는 엘리먼트 자체에 대한 클릭만 방지합니다.


  3) 키 한정자

  keyUp과 같은 키보드 이벤트의 경우, keyCode로 지정하거나, 자주쓰는 키들은 아래 한정자로 지정할 수 있음.

  - .enter        : .13 과 동일. Enter 키를 눌렀을 때로 한정할 수 있음.
  - .tab
  - .delete       : “Delete” 와 “Backspace” 키 모두를 캡처.
  - .esc
  - .space
  - .up
  - .down
  - .left
  - .right
  
  -- 시스템 키 수식어
  - .ctrl
  - .alt
  - .shift
  - .meta         : windows, command 등 OS 시스템키
  - .exact

  ※ 수식어 키는 일반 키와 다르며, 해당 키가 눌려진 상태에서 다른 키가까지 눌러야 발생.
    즉,`keyup.ctrl`는 `ctrl`을 누른 상태에서 키를 놓으면 트리거됨. `ctrl` 키만 놓으면 트리거되지 않음.
    
    ctrl 키는 특히 브라우저 자체 단축키까지 막기가 불가능해서, 제어하려고 드는 게 오히려 막무가네일 수 있으니 잘 생각핳 것.

  ※ 막상 써보면 쉽지 않다. 보통 키보드 이벤트를 제어하는 함수를 작성항 때,
    특정 키 하나만 염두해두고 작성하는 게 아니라, KeyCode 범위에 따라 분기 처리를 하기 때문.

    오히려 함수를 여러개 만들어야할 수도 있는 번거로움이 발생할 수도 있으므로 상황에 맞게 사용할 것.

    심지어 한글과 같은 조합키를 제어하기가 가장 까다로움.


  4) 마우스 한정자

  - .left
  - .right
  - .middle
  
  위 수식어는 특정 마우스 버튼에 의해 트리거 된 이벤트로 핸들러를 제한함.


● computed & watch

참고: https://kr.vuejs.org/v2/guide/computed.html

  1) computed
    - 복잡한 계산을 수행해서 표출해야할 때, 사용.
    - data 에 선언된 변수명과 중복 불가능.
    - computed 속성은 종속 대상을 따라 저장(캐싱)된다는 것,
    - 함수형으로 쓸 경우에는 return 문이 필요.

    methods: {
      reversedMsg: function () {
        return this.msg.split('').reverse().join('')
      }
    }
    
    이 상태에서 msg 가 변경되지 않는 한, computed 속성인 reversedMsg 여러 번 요청해도 계산을 다시 하지 않고 계산되어 있던 결과를 즉시 반환.
    -> 내용중에 Vue 인스턴스 내의 data를 활용하지 않을 경우, 딱 한번만 수행되고 이후 업데이트 되지 않음.

    ※ 이에 비해 메소드를 호출하면 렌더링을 다시 할 때마다 항상 함수를 실행.
      캐싱을 원하지 않는 경우 메소드를 사용해야함.

    - 내부에 get, set 함수를 통해 watch 처럼 만들 수도 있다.

  2) watch
    - 데이터의 변화를 감지할 때 사용.
    - data 블록에 선언된 변수명과 동일한 이름으로 함수명을 설정하면,
      바인딩된 값이 변화할 때마다 함수의 내용을 실행함.
    - 입력전후를 비교하기 용이함.

    Vue 에서는 watch 보다 computed 를 더 권장함.